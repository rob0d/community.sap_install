# SPDX-License-Identifier: Apache-2.0
---

- name: Get list of what provides packages  # noqa command-instead-of-module
  ansible.builtin.command:
    cmd: "rpm -q --whatprovides {{ item }}"
  register: __sap_general_preconfigure_register_whatprovides
  changed_when: false
  ignore_errors: true
  loop: "{{ sap_general_preconfigure_packages }}"


# Both sap_general_preconfigure_packages and __sap_general_preconfigure_min_pkgs are checked at same time.
- name: Assert that all required packages are installed
  ansible.builtin.assert:
    that: item in ansible_facts.packages
      or __sap_general_preconfigure_register_whatprovides.results | selectattr('item', 'equalto', item) | map(attribute='rc') | first == 0
    fail_msg: "FAIL: Package '{{ item }}' is not installed!"
    success_msg: "PASS: Package '{{ item }}' is installed."
  loop: "{{ sap_general_preconfigure_packages if not sap_general_preconfigure_min_package_check | bool
    else ((sap_general_preconfigure_packages | d([])) + (__sap_general_preconfigure_min_pkgs | d([])) | map(attribute='0') | unique) }}"
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"


# Availability of minimum packages is checked above.
- name: Assert that all minimum required packages are installed with minimum version
  ansible.builtin.assert:
    that:
      - __version is version(item[1], '>=')
    fail_msg: "FAIL: Minimum package version '{{ item[0] }}-{{ item[1] }}' is not installed! Current version: '{{ __version }}'"
    success_msg: "PASS: Minimum package version '{{ item[0] }}-{{ item[1] }}' is installed."
  vars:
    __version: "{{ ansible_facts.packages[item[0]][0]['version'] ~ '-' ~ ansible_facts.packages[item[0]][0]['release']
      ~ '.' ~ ansible_facts.packages[item[0]][0]['arch']}}"
  loop: "{{ __sap_general_preconfigure_min_pkgs }}"
  when:
    - sap_general_preconfigure_min_package_check | bool
    - __sap_general_preconfigure_min_pkgs | d([])
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"


- name: Get info about possible package updates # noqa command-instead-of-module
  ansible.builtin.command:
    cmd: zypper -q patch-check
  timeout: 120
  retries: 5
  register: __sap_general_preconfigure_register_zypper_check_update_assert
  changed_when: false
  ignore_errors: true  # true, because unpatched system is always error.
  when: sap_general_preconfigure_update

- name: Assert that there are no more possible package updates
  ansible.builtin.assert:
    that: __sap_general_preconfigure_register_zypper_check_update_assert.rc == 0
    fail_msg: "FAIL: System needs to be updated!"
    success_msg: "PASS: There are no more outstanding package updates."
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"
  when: sap_general_preconfigure_update

- name: Report if checking for possible package updates is not requested
  ansible.builtin.debug:
    msg: "INFO: Not checking for possible package updates (variable sap_general_preconfigure_update)."
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"
  when: not sap_general_preconfigure_update


# Reason for noqa: The command to be executed might contain pipes
- name: Determine if the system needs to be restarted # noqa command-instead-of-shell
  ansible.builtin.shell:
    cmd: "zypper ps"
  register: __sap_general_preconfigure_register_needs_restarting_assert
  changed_when: false
  check_mode: false
  ignore_errors: true  # true, because output is too large.

- name: Assert that system needs no restart
  ansible.builtin.assert:
    that: __sap_general_preconfigure_register_needs_restarting_assert is success
    fail_msg: "FAIL: System needs to be restarted!"
    success_msg: "PASS: System needs no restart."
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"


- name: Assert saptune is at requested version
  ansible.builtin.assert:
    that: ansible_facts.packages['saptune'][0]['version'] == sap_general_preconfigure_saptune_version
    fail_msg: "FAIL: saptune version installed is {{ ansible_facts.packages['saptune'][0]['version']
      }} but the version {{ sap_general_preconfigure_saptune_version }} was expected"
    success_msg: "PASS: the installed version of saptune meets the expected version: {{ sap_general_preconfigure_saptune_version }}"
  when:
    - __sap_general_preconfigure_use_saptune
    - sap_general_preconfigure_saptune_version is defined
    - sap_general_preconfigure_saptune_version | length > 0
